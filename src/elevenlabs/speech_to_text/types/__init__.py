# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .speech_to_text_convert_request_file_format import SpeechToTextConvertRequestFileFormat
    from .speech_to_text_convert_request_timestamps_granularity import SpeechToTextConvertRequestTimestampsGranularity
    from .speech_to_text_convert_request_webhook_metadata import SpeechToTextConvertRequestWebhookMetadata
    from .speech_to_text_convert_response import SpeechToTextConvertResponse
_dynamic_imports: typing.Dict[str, str] = {
    "SpeechToTextConvertRequestFileFormat": ".speech_to_text_convert_request_file_format",
    "SpeechToTextConvertRequestTimestampsGranularity": ".speech_to_text_convert_request_timestamps_granularity",
    "SpeechToTextConvertRequestWebhookMetadata": ".speech_to_text_convert_request_webhook_metadata",
    "SpeechToTextConvertResponse": ".speech_to_text_convert_response",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "SpeechToTextConvertRequestFileFormat",
    "SpeechToTextConvertRequestTimestampsGranularity",
    "SpeechToTextConvertRequestWebhookMetadata",
    "SpeechToTextConvertResponse",
]
