# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata


class AstEqualsOperatorNodeInputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstEqualsOperatorNodeInputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


AstEqualsOperatorNodeInputLeft = typing_extensions.Annotated[
    typing.Union[
        AstEqualsOperatorNodeInputLeft_AndOperator,
        AstEqualsOperatorNodeInputLeft_BooleanLiteral,
        AstEqualsOperatorNodeInputLeft_DynamicVariable,
        AstEqualsOperatorNodeInputLeft_EqOperator,
        AstEqualsOperatorNodeInputLeft_GtOperator,
        AstEqualsOperatorNodeInputLeft_GteOperator,
        AstEqualsOperatorNodeInputLeft_Llm,
        AstEqualsOperatorNodeInputLeft_LtOperator,
        AstEqualsOperatorNodeInputLeft_LteOperator,
        AstEqualsOperatorNodeInputLeft_NeqOperator,
        AstEqualsOperatorNodeInputLeft_NumberLiteral,
        AstEqualsOperatorNodeInputLeft_OrOperator,
        AstEqualsOperatorNodeInputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]
from .ast_and_operator_node_input_children_item import AstAndOperatorNodeInputChildrenItem  # noqa: E402, F401, I001
from .ast_equals_operator_node_input_right import AstEqualsOperatorNodeInputRight  # noqa: E402, F401, I001
from .ast_greater_than_operator_node_input_left import AstGreaterThanOperatorNodeInputLeft  # noqa: E402, F401, I001
from .ast_greater_than_operator_node_input_right import AstGreaterThanOperatorNodeInputRight  # noqa: E402, F401, I001
from .ast_greater_than_or_equals_operator_node_input_left import AstGreaterThanOrEqualsOperatorNodeInputLeft  # noqa: E402, F401, I001
from .ast_greater_than_or_equals_operator_node_input_right import AstGreaterThanOrEqualsOperatorNodeInputRight  # noqa: E402, F401, I001
from .ast_less_than_operator_node_input_left import AstLessThanOperatorNodeInputLeft  # noqa: E402, F401, I001
from .ast_less_than_operator_node_input_right import AstLessThanOperatorNodeInputRight  # noqa: E402, F401, I001
from .ast_less_than_or_equals_operator_node_input_left import AstLessThanOrEqualsOperatorNodeInputLeft  # noqa: E402, F401, I001
from .ast_less_than_or_equals_operator_node_input_right import AstLessThanOrEqualsOperatorNodeInputRight  # noqa: E402, F401, I001
from .ast_not_equals_operator_node_input_left import AstNotEqualsOperatorNodeInputLeft  # noqa: E402, F401, I001
from .ast_not_equals_operator_node_input_right import AstNotEqualsOperatorNodeInputRight  # noqa: E402, F401, I001
from .ast_or_operator_node_input_children_item import AstOrOperatorNodeInputChildrenItem  # noqa: E402, F401, I001

update_forward_refs(AstEqualsOperatorNodeInputLeft_AndOperator)
update_forward_refs(AstEqualsOperatorNodeInputLeft_EqOperator)
update_forward_refs(AstEqualsOperatorNodeInputLeft_GtOperator)
update_forward_refs(AstEqualsOperatorNodeInputLeft_GteOperator)
update_forward_refs(AstEqualsOperatorNodeInputLeft_LtOperator)
update_forward_refs(AstEqualsOperatorNodeInputLeft_LteOperator)
update_forward_refs(AstEqualsOperatorNodeInputLeft_NeqOperator)
update_forward_refs(AstEqualsOperatorNodeInputLeft_OrOperator)
