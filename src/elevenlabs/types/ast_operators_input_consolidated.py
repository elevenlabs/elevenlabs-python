# This file was auto-generated by Fern from our API Definition.
# CONSOLIDATED: All mutually recursive AST operator input types merged into one file.
# This eliminates circular import issues.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata


# From ast_and_operator_node_input_children_item.py
class AstAndOperatorNodeInputChildrenItem_AndOperator(UncheckedBaseModel):
    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_BooleanLiteral(UncheckedBaseModel):
    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_DynamicVariable(UncheckedBaseModel):
    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_EqOperator(UncheckedBaseModel):
    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_GtOperator(UncheckedBaseModel):
    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_GteOperator(UncheckedBaseModel):
    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_Llm(UncheckedBaseModel):
    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_LtOperator(UncheckedBaseModel):
    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_LteOperator(UncheckedBaseModel):
    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_NeqOperator(UncheckedBaseModel):
    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_NumberLiteral(UncheckedBaseModel):
    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeInputChildrenItem_OrOperator(UncheckedBaseModel):
    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstAndOperatorNodeInputChildrenItem_StringLiteral(UncheckedBaseModel):
    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_or_operator_node_input_children_item.py
class AstOrOperatorNodeInputChildrenItem_AndOperator(UncheckedBaseModel):
    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_BooleanLiteral(UncheckedBaseModel):
    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_DynamicVariable(UncheckedBaseModel):
    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_EqOperator(UncheckedBaseModel):
    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_GtOperator(UncheckedBaseModel):
    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_GteOperator(UncheckedBaseModel):
    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_Llm(UncheckedBaseModel):
    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_LtOperator(UncheckedBaseModel):
    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_LteOperator(UncheckedBaseModel):
    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_NeqOperator(UncheckedBaseModel):
    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_NumberLiteral(UncheckedBaseModel):
    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeInputChildrenItem_OrOperator(UncheckedBaseModel):
    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstOrOperatorNodeInputChildrenItem_StringLiteral(UncheckedBaseModel):
    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_equals_operator_node_input_left.py
class AstEqualsOperatorNodeInputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstEqualsOperatorNodeInputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_equals_operator_node_input_right.py
class AstEqualsOperatorNodeInputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeInputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstEqualsOperatorNodeInputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_greater_than_operator_node_input_left.py
class AstGreaterThanOperatorNodeInputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstGreaterThanOperatorNodeInputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_greater_than_operator_node_input_right.py
class AstGreaterThanOperatorNodeInputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeInputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstGreaterThanOperatorNodeInputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_greater_than_or_equals_operator_node_input_left.py
class AstGreaterThanOrEqualsOperatorNodeInputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstGreaterThanOrEqualsOperatorNodeInputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_greater_than_or_equals_operator_node_input_right.py
class AstGreaterThanOrEqualsOperatorNodeInputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeInputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstGreaterThanOrEqualsOperatorNodeInputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_less_than_operator_node_input_left.py
class AstLessThanOperatorNodeInputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstLessThanOperatorNodeInputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_less_than_operator_node_input_right.py
class AstLessThanOperatorNodeInputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeInputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstLessThanOperatorNodeInputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_less_than_or_equals_operator_node_input_left.py
class AstLessThanOrEqualsOperatorNodeInputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstLessThanOrEqualsOperatorNodeInputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_less_than_or_equals_operator_node_input_right.py
class AstLessThanOrEqualsOperatorNodeInputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeInputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstLessThanOrEqualsOperatorNodeInputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_not_equals_operator_node_input_left.py
class AstNotEqualsOperatorNodeInputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstNotEqualsOperatorNodeInputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_not_equals_operator_node_input_right.py
class AstNotEqualsOperatorNodeInputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeInputLeft"
    right: "AstEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeInputLeft"
    right: "AstGreaterThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeInputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeInputLeft"
    right: "AstLessThanOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeInputLeft"
    right: "AstLessThanOrEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeInputLeft"
    right: "AstNotEqualsOperatorNodeInputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeInputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeInputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input import AstEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001


class AstNotEqualsOperatorNodeInputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# ============================================================================
# Union type definitions
# ============================================================================

AstAndOperatorNodeInputChildrenItem = typing_extensions.Annotated[
    typing.Union[
        AstAndOperatorNodeInputChildrenItem_AndOperator,
        AstAndOperatorNodeInputChildrenItem_BooleanLiteral,
        AstAndOperatorNodeInputChildrenItem_DynamicVariable,
        AstAndOperatorNodeInputChildrenItem_EqOperator,
        AstAndOperatorNodeInputChildrenItem_GtOperator,
        AstAndOperatorNodeInputChildrenItem_GteOperator,
        AstAndOperatorNodeInputChildrenItem_Llm,
        AstAndOperatorNodeInputChildrenItem_LtOperator,
        AstAndOperatorNodeInputChildrenItem_LteOperator,
        AstAndOperatorNodeInputChildrenItem_NeqOperator,
        AstAndOperatorNodeInputChildrenItem_NumberLiteral,
        AstAndOperatorNodeInputChildrenItem_OrOperator,
        AstAndOperatorNodeInputChildrenItem_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstOrOperatorNodeInputChildrenItem = typing_extensions.Annotated[
    typing.Union[
        AstOrOperatorNodeInputChildrenItem_AndOperator,
        AstOrOperatorNodeInputChildrenItem_BooleanLiteral,
        AstOrOperatorNodeInputChildrenItem_DynamicVariable,
        AstOrOperatorNodeInputChildrenItem_EqOperator,
        AstOrOperatorNodeInputChildrenItem_GtOperator,
        AstOrOperatorNodeInputChildrenItem_GteOperator,
        AstOrOperatorNodeInputChildrenItem_Llm,
        AstOrOperatorNodeInputChildrenItem_LtOperator,
        AstOrOperatorNodeInputChildrenItem_LteOperator,
        AstOrOperatorNodeInputChildrenItem_NeqOperator,
        AstOrOperatorNodeInputChildrenItem_NumberLiteral,
        AstOrOperatorNodeInputChildrenItem_OrOperator,
        AstOrOperatorNodeInputChildrenItem_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstEqualsOperatorNodeInputLeft = typing_extensions.Annotated[
    typing.Union[
        AstEqualsOperatorNodeInputLeft_AndOperator,
        AstEqualsOperatorNodeInputLeft_BooleanLiteral,
        AstEqualsOperatorNodeInputLeft_DynamicVariable,
        AstEqualsOperatorNodeInputLeft_EqOperator,
        AstEqualsOperatorNodeInputLeft_GtOperator,
        AstEqualsOperatorNodeInputLeft_GteOperator,
        AstEqualsOperatorNodeInputLeft_Llm,
        AstEqualsOperatorNodeInputLeft_LtOperator,
        AstEqualsOperatorNodeInputLeft_LteOperator,
        AstEqualsOperatorNodeInputLeft_NeqOperator,
        AstEqualsOperatorNodeInputLeft_NumberLiteral,
        AstEqualsOperatorNodeInputLeft_OrOperator,
        AstEqualsOperatorNodeInputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstEqualsOperatorNodeInputRight = typing_extensions.Annotated[
    typing.Union[
        AstEqualsOperatorNodeInputRight_AndOperator,
        AstEqualsOperatorNodeInputRight_BooleanLiteral,
        AstEqualsOperatorNodeInputRight_DynamicVariable,
        AstEqualsOperatorNodeInputRight_EqOperator,
        AstEqualsOperatorNodeInputRight_GtOperator,
        AstEqualsOperatorNodeInputRight_GteOperator,
        AstEqualsOperatorNodeInputRight_Llm,
        AstEqualsOperatorNodeInputRight_LtOperator,
        AstEqualsOperatorNodeInputRight_LteOperator,
        AstEqualsOperatorNodeInputRight_NeqOperator,
        AstEqualsOperatorNodeInputRight_NumberLiteral,
        AstEqualsOperatorNodeInputRight_OrOperator,
        AstEqualsOperatorNodeInputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstGreaterThanOperatorNodeInputLeft = typing_extensions.Annotated[
    typing.Union[
        AstGreaterThanOperatorNodeInputLeft_AndOperator,
        AstGreaterThanOperatorNodeInputLeft_BooleanLiteral,
        AstGreaterThanOperatorNodeInputLeft_DynamicVariable,
        AstGreaterThanOperatorNodeInputLeft_EqOperator,
        AstGreaterThanOperatorNodeInputLeft_GtOperator,
        AstGreaterThanOperatorNodeInputLeft_GteOperator,
        AstGreaterThanOperatorNodeInputLeft_Llm,
        AstGreaterThanOperatorNodeInputLeft_LtOperator,
        AstGreaterThanOperatorNodeInputLeft_LteOperator,
        AstGreaterThanOperatorNodeInputLeft_NeqOperator,
        AstGreaterThanOperatorNodeInputLeft_NumberLiteral,
        AstGreaterThanOperatorNodeInputLeft_OrOperator,
        AstGreaterThanOperatorNodeInputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstGreaterThanOperatorNodeInputRight = typing_extensions.Annotated[
    typing.Union[
        AstGreaterThanOperatorNodeInputRight_AndOperator,
        AstGreaterThanOperatorNodeInputRight_BooleanLiteral,
        AstGreaterThanOperatorNodeInputRight_DynamicVariable,
        AstGreaterThanOperatorNodeInputRight_EqOperator,
        AstGreaterThanOperatorNodeInputRight_GtOperator,
        AstGreaterThanOperatorNodeInputRight_GteOperator,
        AstGreaterThanOperatorNodeInputRight_Llm,
        AstGreaterThanOperatorNodeInputRight_LtOperator,
        AstGreaterThanOperatorNodeInputRight_LteOperator,
        AstGreaterThanOperatorNodeInputRight_NeqOperator,
        AstGreaterThanOperatorNodeInputRight_NumberLiteral,
        AstGreaterThanOperatorNodeInputRight_OrOperator,
        AstGreaterThanOperatorNodeInputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstGreaterThanOrEqualsOperatorNodeInputLeft = typing_extensions.Annotated[
    typing.Union[
        AstGreaterThanOrEqualsOperatorNodeInputLeft_AndOperator,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_BooleanLiteral,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_DynamicVariable,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_EqOperator,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_GtOperator,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_GteOperator,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_Llm,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_LtOperator,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_LteOperator,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_NeqOperator,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_NumberLiteral,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_OrOperator,
        AstGreaterThanOrEqualsOperatorNodeInputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstGreaterThanOrEqualsOperatorNodeInputRight = typing_extensions.Annotated[
    typing.Union[
        AstGreaterThanOrEqualsOperatorNodeInputRight_AndOperator,
        AstGreaterThanOrEqualsOperatorNodeInputRight_BooleanLiteral,
        AstGreaterThanOrEqualsOperatorNodeInputRight_DynamicVariable,
        AstGreaterThanOrEqualsOperatorNodeInputRight_EqOperator,
        AstGreaterThanOrEqualsOperatorNodeInputRight_GtOperator,
        AstGreaterThanOrEqualsOperatorNodeInputRight_GteOperator,
        AstGreaterThanOrEqualsOperatorNodeInputRight_Llm,
        AstGreaterThanOrEqualsOperatorNodeInputRight_LtOperator,
        AstGreaterThanOrEqualsOperatorNodeInputRight_LteOperator,
        AstGreaterThanOrEqualsOperatorNodeInputRight_NeqOperator,
        AstGreaterThanOrEqualsOperatorNodeInputRight_NumberLiteral,
        AstGreaterThanOrEqualsOperatorNodeInputRight_OrOperator,
        AstGreaterThanOrEqualsOperatorNodeInputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstLessThanOperatorNodeInputLeft = typing_extensions.Annotated[
    typing.Union[
        AstLessThanOperatorNodeInputLeft_AndOperator,
        AstLessThanOperatorNodeInputLeft_BooleanLiteral,
        AstLessThanOperatorNodeInputLeft_DynamicVariable,
        AstLessThanOperatorNodeInputLeft_EqOperator,
        AstLessThanOperatorNodeInputLeft_GtOperator,
        AstLessThanOperatorNodeInputLeft_GteOperator,
        AstLessThanOperatorNodeInputLeft_Llm,
        AstLessThanOperatorNodeInputLeft_LtOperator,
        AstLessThanOperatorNodeInputLeft_LteOperator,
        AstLessThanOperatorNodeInputLeft_NeqOperator,
        AstLessThanOperatorNodeInputLeft_NumberLiteral,
        AstLessThanOperatorNodeInputLeft_OrOperator,
        AstLessThanOperatorNodeInputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstLessThanOperatorNodeInputRight = typing_extensions.Annotated[
    typing.Union[
        AstLessThanOperatorNodeInputRight_AndOperator,
        AstLessThanOperatorNodeInputRight_BooleanLiteral,
        AstLessThanOperatorNodeInputRight_DynamicVariable,
        AstLessThanOperatorNodeInputRight_EqOperator,
        AstLessThanOperatorNodeInputRight_GtOperator,
        AstLessThanOperatorNodeInputRight_GteOperator,
        AstLessThanOperatorNodeInputRight_Llm,
        AstLessThanOperatorNodeInputRight_LtOperator,
        AstLessThanOperatorNodeInputRight_LteOperator,
        AstLessThanOperatorNodeInputRight_NeqOperator,
        AstLessThanOperatorNodeInputRight_NumberLiteral,
        AstLessThanOperatorNodeInputRight_OrOperator,
        AstLessThanOperatorNodeInputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstLessThanOrEqualsOperatorNodeInputLeft = typing_extensions.Annotated[
    typing.Union[
        AstLessThanOrEqualsOperatorNodeInputLeft_AndOperator,
        AstLessThanOrEqualsOperatorNodeInputLeft_BooleanLiteral,
        AstLessThanOrEqualsOperatorNodeInputLeft_DynamicVariable,
        AstLessThanOrEqualsOperatorNodeInputLeft_EqOperator,
        AstLessThanOrEqualsOperatorNodeInputLeft_GtOperator,
        AstLessThanOrEqualsOperatorNodeInputLeft_GteOperator,
        AstLessThanOrEqualsOperatorNodeInputLeft_Llm,
        AstLessThanOrEqualsOperatorNodeInputLeft_LtOperator,
        AstLessThanOrEqualsOperatorNodeInputLeft_LteOperator,
        AstLessThanOrEqualsOperatorNodeInputLeft_NeqOperator,
        AstLessThanOrEqualsOperatorNodeInputLeft_NumberLiteral,
        AstLessThanOrEqualsOperatorNodeInputLeft_OrOperator,
        AstLessThanOrEqualsOperatorNodeInputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstLessThanOrEqualsOperatorNodeInputRight = typing_extensions.Annotated[
    typing.Union[
        AstLessThanOrEqualsOperatorNodeInputRight_AndOperator,
        AstLessThanOrEqualsOperatorNodeInputRight_BooleanLiteral,
        AstLessThanOrEqualsOperatorNodeInputRight_DynamicVariable,
        AstLessThanOrEqualsOperatorNodeInputRight_EqOperator,
        AstLessThanOrEqualsOperatorNodeInputRight_GtOperator,
        AstLessThanOrEqualsOperatorNodeInputRight_GteOperator,
        AstLessThanOrEqualsOperatorNodeInputRight_Llm,
        AstLessThanOrEqualsOperatorNodeInputRight_LtOperator,
        AstLessThanOrEqualsOperatorNodeInputRight_LteOperator,
        AstLessThanOrEqualsOperatorNodeInputRight_NeqOperator,
        AstLessThanOrEqualsOperatorNodeInputRight_NumberLiteral,
        AstLessThanOrEqualsOperatorNodeInputRight_OrOperator,
        AstLessThanOrEqualsOperatorNodeInputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstNotEqualsOperatorNodeInputLeft = typing_extensions.Annotated[
    typing.Union[
        AstNotEqualsOperatorNodeInputLeft_AndOperator,
        AstNotEqualsOperatorNodeInputLeft_BooleanLiteral,
        AstNotEqualsOperatorNodeInputLeft_DynamicVariable,
        AstNotEqualsOperatorNodeInputLeft_EqOperator,
        AstNotEqualsOperatorNodeInputLeft_GtOperator,
        AstNotEqualsOperatorNodeInputLeft_GteOperator,
        AstNotEqualsOperatorNodeInputLeft_Llm,
        AstNotEqualsOperatorNodeInputLeft_LtOperator,
        AstNotEqualsOperatorNodeInputLeft_LteOperator,
        AstNotEqualsOperatorNodeInputLeft_NeqOperator,
        AstNotEqualsOperatorNodeInputLeft_NumberLiteral,
        AstNotEqualsOperatorNodeInputLeft_OrOperator,
        AstNotEqualsOperatorNodeInputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstNotEqualsOperatorNodeInputRight = typing_extensions.Annotated[
    typing.Union[
        AstNotEqualsOperatorNodeInputRight_AndOperator,
        AstNotEqualsOperatorNodeInputRight_BooleanLiteral,
        AstNotEqualsOperatorNodeInputRight_DynamicVariable,
        AstNotEqualsOperatorNodeInputRight_EqOperator,
        AstNotEqualsOperatorNodeInputRight_GtOperator,
        AstNotEqualsOperatorNodeInputRight_GteOperator,
        AstNotEqualsOperatorNodeInputRight_Llm,
        AstNotEqualsOperatorNodeInputRight_LtOperator,
        AstNotEqualsOperatorNodeInputRight_LteOperator,
        AstNotEqualsOperatorNodeInputRight_NeqOperator,
        AstNotEqualsOperatorNodeInputRight_NumberLiteral,
        AstNotEqualsOperatorNodeInputRight_OrOperator,
        AstNotEqualsOperatorNodeInputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

# ============================================================================
# Update forward references - all types are now defined!
# ============================================================================

# update_forward_refs(AstAndOperatorNodeInputChildrenItem_AndOperator)
# update_forward_refs(AstAndOperatorNodeInputChildrenItem_EqOperator)
# update_forward_refs(AstAndOperatorNodeInputChildrenItem_GtOperator)
# update_forward_refs(AstAndOperatorNodeInputChildrenItem_GteOperator)
# update_forward_refs(AstAndOperatorNodeInputChildrenItem_LtOperator)
# update_forward_refs(AstAndOperatorNodeInputChildrenItem_LteOperator)
# update_forward_refs(AstAndOperatorNodeInputChildrenItem_NeqOperator)
# update_forward_refs(AstAndOperatorNodeInputChildrenItem_OrOperator)
# update_forward_refs(AstEqualsOperatorNodeInputLeft_AndOperator)
# update_forward_refs(AstEqualsOperatorNodeInputLeft_EqOperator)
# update_forward_refs(AstEqualsOperatorNodeInputLeft_GtOperator)
# update_forward_refs(AstEqualsOperatorNodeInputLeft_GteOperator)
# update_forward_refs(AstEqualsOperatorNodeInputLeft_LtOperator)
# update_forward_refs(AstEqualsOperatorNodeInputLeft_LteOperator)
# update_forward_refs(AstEqualsOperatorNodeInputLeft_NeqOperator)
# update_forward_refs(AstEqualsOperatorNodeInputLeft_OrOperator)
# update_forward_refs(AstEqualsOperatorNodeInputRight_AndOperator)
# update_forward_refs(AstEqualsOperatorNodeInputRight_EqOperator)
# update_forward_refs(AstEqualsOperatorNodeInputRight_GtOperator)
# update_forward_refs(AstEqualsOperatorNodeInputRight_GteOperator)
# update_forward_refs(AstEqualsOperatorNodeInputRight_LtOperator)
# update_forward_refs(AstEqualsOperatorNodeInputRight_LteOperator)
# update_forward_refs(AstEqualsOperatorNodeInputRight_NeqOperator)
# update_forward_refs(AstEqualsOperatorNodeInputRight_OrOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputLeft_AndOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputLeft_EqOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputLeft_GtOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputLeft_GteOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputLeft_LtOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputLeft_LteOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputLeft_NeqOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputLeft_OrOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputRight_AndOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputRight_EqOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputRight_GtOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputRight_GteOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputRight_LtOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputRight_LteOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputRight_NeqOperator)
# update_forward_refs(AstGreaterThanOperatorNodeInputRight_OrOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputLeft_AndOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputLeft_EqOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputLeft_GtOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputLeft_GteOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputLeft_LtOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputLeft_LteOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputLeft_NeqOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputLeft_OrOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputRight_AndOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputRight_EqOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputRight_GtOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputRight_GteOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputRight_LtOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputRight_LteOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputRight_NeqOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeInputRight_OrOperator)
# update_forward_refs(AstLessThanOperatorNodeInputLeft_AndOperator)
# update_forward_refs(AstLessThanOperatorNodeInputLeft_EqOperator)
# update_forward_refs(AstLessThanOperatorNodeInputLeft_GtOperator)
# update_forward_refs(AstLessThanOperatorNodeInputLeft_GteOperator)
# update_forward_refs(AstLessThanOperatorNodeInputLeft_LtOperator)
# update_forward_refs(AstLessThanOperatorNodeInputLeft_LteOperator)
# update_forward_refs(AstLessThanOperatorNodeInputLeft_NeqOperator)
# update_forward_refs(AstLessThanOperatorNodeInputLeft_OrOperator)
# update_forward_refs(AstLessThanOperatorNodeInputRight_AndOperator)
# update_forward_refs(AstLessThanOperatorNodeInputRight_EqOperator)
# update_forward_refs(AstLessThanOperatorNodeInputRight_GtOperator)
# update_forward_refs(AstLessThanOperatorNodeInputRight_GteOperator)
# update_forward_refs(AstLessThanOperatorNodeInputRight_LtOperator)
# update_forward_refs(AstLessThanOperatorNodeInputRight_LteOperator)
# update_forward_refs(AstLessThanOperatorNodeInputRight_NeqOperator)
# update_forward_refs(AstLessThanOperatorNodeInputRight_OrOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputLeft_AndOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputLeft_EqOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputLeft_GtOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputLeft_GteOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputLeft_LtOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputLeft_LteOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputLeft_NeqOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputLeft_OrOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputRight_AndOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputRight_EqOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputRight_GtOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputRight_GteOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputRight_LtOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputRight_LteOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputRight_NeqOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeInputRight_OrOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputLeft_AndOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputLeft_EqOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputLeft_GtOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputLeft_GteOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputLeft_LtOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputLeft_LteOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputLeft_NeqOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputLeft_OrOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputRight_AndOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputRight_EqOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputRight_GtOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputRight_GteOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputRight_LtOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputRight_LteOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputRight_NeqOperator)
# update_forward_refs(AstNotEqualsOperatorNodeInputRight_OrOperator)
# update_forward_refs(AstOrOperatorNodeInputChildrenItem_AndOperator)
# update_forward_refs(AstOrOperatorNodeInputChildrenItem_EqOperator)
# update_forward_refs(AstOrOperatorNodeInputChildrenItem_GtOperator)
# update_forward_refs(AstOrOperatorNodeInputChildrenItem_GteOperator)
# update_forward_refs(AstOrOperatorNodeInputChildrenItem_LtOperator)
# update_forward_refs(AstOrOperatorNodeInputChildrenItem_LteOperator)
# update_forward_refs(AstOrOperatorNodeInputChildrenItem_NeqOperator)
# update_forward_refs(AstOrOperatorNodeInputChildrenItem_OrOperator)
