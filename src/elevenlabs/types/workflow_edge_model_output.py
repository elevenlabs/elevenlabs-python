# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel
from .workflow_edge_model_output_backward_condition import WorkflowEdgeModelOutputBackwardCondition
from .workflow_edge_model_output_forward_condition import WorkflowEdgeModelOutputForwardCondition


class WorkflowEdgeModelOutput(UncheckedBaseModel):
    source: str = pydantic.Field()
    """
    ID of the source node.
    """

    target: str = pydantic.Field()
    """
    ID of the target node.
    """

    forward_condition: typing.Optional[WorkflowEdgeModelOutputForwardCondition] = pydantic.Field(default=None)
    """
    Condition that must be met for the edge to be traversed in the forward direction (source to target).
    """

    backward_condition: typing.Optional[WorkflowEdgeModelOutputBackwardCondition] = pydantic.Field(default=None)
    """
    Condition that must be met for the edge to be traversed in the backward direction (target to source).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(WorkflowEdgeModelOutput)
