# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata


class AstLessThanOperatorNodeLeft_AndOperator(UncheckedBaseModel):
    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_BooleanLiteral(UncheckedBaseModel):
    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_DynamicVariable(UncheckedBaseModel):
    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_EqOperator(UncheckedBaseModel):
    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeLeft"
    right: "AstEqualsOperatorNodeRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_GtOperator(UncheckedBaseModel):
    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeLeft"
    right: "AstGreaterThanOperatorNodeRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_GteOperator(UncheckedBaseModel):
    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_Llm(UncheckedBaseModel):
    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_LtOperator(UncheckedBaseModel):
    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeLeft"
    right: "AstLessThanOperatorNodeRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_LteOperator(UncheckedBaseModel):
    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeLeft"
    right: "AstLessThanOrEqualsOperatorNodeRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_NeqOperator(UncheckedBaseModel):
    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeLeft"
    right: "AstNotEqualsOperatorNodeRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_NumberLiteral(UncheckedBaseModel):
    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeLeft_OrOperator(UncheckedBaseModel):
    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .ast_and_operator_node import AstAndOperatorNode  # noqa: E402, F401, I001
from .ast_equals_operator_node import AstEqualsOperatorNode  # noqa: E402, F401, I001
from .ast_greater_than_operator_node import AstGreaterThanOperatorNode  # noqa: E402, F401, I001
from .ast_greater_than_or_equals_operator_node import AstGreaterThanOrEqualsOperatorNode  # noqa: E402, F401, I001
from .ast_less_than_operator_node import AstLessThanOperatorNode  # noqa: E402, F401, I001
from .ast_less_than_or_equals_operator_node import AstLessThanOrEqualsOperatorNode  # noqa: E402, F401, I001
from .ast_not_equals_operator_node import AstNotEqualsOperatorNode  # noqa: E402, F401, I001
from .ast_or_operator_node import AstOrOperatorNode  # noqa: E402, F401, I001


class AstLessThanOperatorNodeLeft_StringLiteral(UncheckedBaseModel):
    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


AstLessThanOperatorNodeLeft = typing_extensions.Annotated[
    typing.Union[
        AstLessThanOperatorNodeLeft_AndOperator,
        AstLessThanOperatorNodeLeft_BooleanLiteral,
        AstLessThanOperatorNodeLeft_DynamicVariable,
        AstLessThanOperatorNodeLeft_EqOperator,
        AstLessThanOperatorNodeLeft_GtOperator,
        AstLessThanOperatorNodeLeft_GteOperator,
        AstLessThanOperatorNodeLeft_Llm,
        AstLessThanOperatorNodeLeft_LtOperator,
        AstLessThanOperatorNodeLeft_LteOperator,
        AstLessThanOperatorNodeLeft_NeqOperator,
        AstLessThanOperatorNodeLeft_NumberLiteral,
        AstLessThanOperatorNodeLeft_OrOperator,
        AstLessThanOperatorNodeLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]
from .ast_and_operator_node_children_item import AstAndOperatorNodeChildrenItem  # noqa: E402, F401, I001
from .ast_equals_operator_node_left import AstEqualsOperatorNodeLeft  # noqa: E402, F401, I001
from .ast_equals_operator_node_right import AstEqualsOperatorNodeRight  # noqa: E402, F401, I001
from .ast_greater_than_operator_node_left import AstGreaterThanOperatorNodeLeft  # noqa: E402, F401, I001
from .ast_greater_than_operator_node_right import AstGreaterThanOperatorNodeRight  # noqa: E402, F401, I001
from .ast_greater_than_or_equals_operator_node_left import AstGreaterThanOrEqualsOperatorNodeLeft  # noqa: E402, F401, I001
from .ast_greater_than_or_equals_operator_node_right import AstGreaterThanOrEqualsOperatorNodeRight  # noqa: E402, F401, I001
from .ast_less_than_operator_node_right import AstLessThanOperatorNodeRight  # noqa: E402, F401, I001
from .ast_less_than_or_equals_operator_node_left import AstLessThanOrEqualsOperatorNodeLeft  # noqa: E402, F401, I001
from .ast_less_than_or_equals_operator_node_right import AstLessThanOrEqualsOperatorNodeRight  # noqa: E402, F401, I001
from .ast_not_equals_operator_node_left import AstNotEqualsOperatorNodeLeft  # noqa: E402, F401, I001
from .ast_not_equals_operator_node_right import AstNotEqualsOperatorNodeRight  # noqa: E402, F401, I001
from .ast_or_operator_node_children_item import AstOrOperatorNodeChildrenItem  # noqa: E402, F401, I001

update_forward_refs(AstLessThanOperatorNodeLeft_AndOperator)
update_forward_refs(AstLessThanOperatorNodeLeft_EqOperator)
update_forward_refs(AstLessThanOperatorNodeLeft_GtOperator)
update_forward_refs(AstLessThanOperatorNodeLeft_GteOperator)
update_forward_refs(AstLessThanOperatorNodeLeft_LtOperator)
update_forward_refs(AstLessThanOperatorNodeLeft_LteOperator)
update_forward_refs(AstLessThanOperatorNodeLeft_NeqOperator)
update_forward_refs(AstLessThanOperatorNodeLeft_OrOperator)
