# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata
from .workflow_expression_condition_model_input_expression import WorkflowExpressionConditionModelInputExpression


class WorkflowEdgeModelInputBackwardCondition_Expression(UncheckedBaseModel):
    type: typing.Literal["expression"] = "expression"
    label: typing.Optional[str] = None
    expression: WorkflowExpressionConditionModelInputExpression

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowEdgeModelInputBackwardCondition_Llm(UncheckedBaseModel):
    type: typing.Literal["llm"] = "llm"
    label: typing.Optional[str] = None
    condition: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowEdgeModelInputBackwardCondition_Result(UncheckedBaseModel):
    type: typing.Literal["result"] = "result"
    label: typing.Optional[str] = None
    successful: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WorkflowEdgeModelInputBackwardCondition_Unconditional(UncheckedBaseModel):
    type: typing.Literal["unconditional"] = "unconditional"
    label: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


WorkflowEdgeModelInputBackwardCondition = typing_extensions.Annotated[
    typing.Union[
        WorkflowEdgeModelInputBackwardCondition_Expression,
        WorkflowEdgeModelInputBackwardCondition_Llm,
        WorkflowEdgeModelInputBackwardCondition_Result,
        WorkflowEdgeModelInputBackwardCondition_Unconditional,
    ],
    UnionMetadata(discriminant="type"),
]
update_forward_refs(WorkflowEdgeModelInputBackwardCondition_Expression)
