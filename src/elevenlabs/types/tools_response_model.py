# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel
from .tool_response_model import ToolResponseModel


class ToolsResponseModel(UncheckedBaseModel):
    tools: typing.List[ToolResponseModel]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .array_json_schema_property_output import ArrayJsonSchemaPropertyOutput  # noqa: E402, F401, I001
from .object_json_schema_property_output import ObjectJsonSchemaPropertyOutput  # noqa: E402, F401, I001

# update_forward_refs(ToolsResponseModel)  # Moved to _update_forward_refs_once()


# Lazy forward reference resolution to avoid circular import issues
_forward_refs_updated = False

def _update_forward_refs_once():
    """Update forward references after all types are imported."""
    global _forward_refs_updated
    if not _forward_refs_updated:
        _forward_refs_updated = True
        update_forward_refs(ToolsResponseModel)
