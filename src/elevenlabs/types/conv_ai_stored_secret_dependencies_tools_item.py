# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .dependent_available_tool_identifier_access_level import (
    DependentAvailableToolIdentifierAccessLevel,
)
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
import typing_extensions
from ..core.unchecked_base_model import UnionMetadata


class ConvAiStoredSecretDependenciesToolsItem_Available(UncheckedBaseModel):
    type: typing.Literal["available"] = "available"
    id: str
    name: str
    created_at_unix_secs: int
    access_level: DependentAvailableToolIdentifierAccessLevel

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ConvAiStoredSecretDependenciesToolsItem_Unknown(UncheckedBaseModel):
    type: typing.Literal["unknown"] = "unknown"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ConvAiStoredSecretDependenciesToolsItem = typing_extensions.Annotated[
    typing.Union[
        ConvAiStoredSecretDependenciesToolsItem_Available,
        ConvAiStoredSecretDependenciesToolsItem_Unknown,
    ],
    UnionMetadata(discriminant="type"),
]
