# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel


class AstEqualsOperatorNodeInput(UncheckedBaseModel):
    left: "AstEqualsOperatorNodeInputLeft" = pydantic.Field()
    """
    Left operand of the binary operator.
    """

    right: "AstEqualsOperatorNodeInputRight" = pydantic.Field()
    """
    Right operand of the binary operator.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_input import AstAndOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_input import AstGreaterThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_input import AstGreaterThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_input import AstLessThanOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_input import AstLessThanOrEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_input import AstNotEqualsOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_input import AstOrOperatorNodeInput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input_left import AstEqualsOperatorNodeInputLeft  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_input_right import AstEqualsOperatorNodeInputRight  # noqa: E402, F401, I001

# update_forward_refs(AstEqualsOperatorNodeInput)  # Moved to _update_forward_refs_once()


# Lazy forward reference resolution to avoid circular import issues
_forward_refs_updated = False

def _update_forward_refs_once():
    """Update forward references after all types are imported."""
    global _forward_refs_updated
    if not _forward_refs_updated:
        _forward_refs_updated = True
        update_forward_refs(AstEqualsOperatorNodeInput)
