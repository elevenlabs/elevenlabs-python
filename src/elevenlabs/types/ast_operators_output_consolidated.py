# This file was auto-generated by Fern from our API Definition.
# CONSOLIDATED: All mutually recursive AST operator output types merged into one file.
# This eliminates circular import issues.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata


# From ast_and_operator_node_output_children_item.py
class AstAndOperatorNodeOutputChildrenItem_AndOperator(UncheckedBaseModel):
    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_BooleanLiteral(UncheckedBaseModel):
    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_DynamicVariable(UncheckedBaseModel):
    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_EqOperator(UncheckedBaseModel):
    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_GtOperator(UncheckedBaseModel):
    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_GteOperator(UncheckedBaseModel):
    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_Llm(UncheckedBaseModel):
    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_LtOperator(UncheckedBaseModel):
    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_LteOperator(UncheckedBaseModel):
    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_NeqOperator(UncheckedBaseModel):
    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_NumberLiteral(UncheckedBaseModel):
    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstAndOperatorNodeOutputChildrenItem_OrOperator(UncheckedBaseModel):
    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstAndOperatorNodeOutputChildrenItem_StringLiteral(UncheckedBaseModel):
    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_or_operator_node_output_children_item.py
class AstOrOperatorNodeOutputChildrenItem_AndOperator(UncheckedBaseModel):
    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_BooleanLiteral(UncheckedBaseModel):
    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_DynamicVariable(UncheckedBaseModel):
    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_EqOperator(UncheckedBaseModel):
    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_GtOperator(UncheckedBaseModel):
    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_GteOperator(UncheckedBaseModel):
    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_Llm(UncheckedBaseModel):
    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_LtOperator(UncheckedBaseModel):
    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_LteOperator(UncheckedBaseModel):
    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_NeqOperator(UncheckedBaseModel):
    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_NumberLiteral(UncheckedBaseModel):
    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstOrOperatorNodeOutputChildrenItem_OrOperator(UncheckedBaseModel):
    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstOrOperatorNodeOutputChildrenItem_StringLiteral(UncheckedBaseModel):
    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_equals_operator_node_output_left.py
class AstEqualsOperatorNodeOutputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstEqualsOperatorNodeOutputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_equals_operator_node_output_right.py
class AstEqualsOperatorNodeOutputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstEqualsOperatorNodeOutputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstEqualsOperatorNodeOutputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_greater_than_operator_node_output_left.py
class AstGreaterThanOperatorNodeOutputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstGreaterThanOperatorNodeOutputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_greater_than_operator_node_output_right.py
class AstGreaterThanOperatorNodeOutputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOperatorNodeOutputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstGreaterThanOperatorNodeOutputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_greater_than_or_equals_operator_node_output_left.py
class AstGreaterThanOrEqualsOperatorNodeOutputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstGreaterThanOrEqualsOperatorNodeOutputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_greater_than_or_equals_operator_node_output_right.py
class AstGreaterThanOrEqualsOperatorNodeOutputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstGreaterThanOrEqualsOperatorNodeOutputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstGreaterThanOrEqualsOperatorNodeOutputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_less_than_operator_node_output_left.py
class AstLessThanOperatorNodeOutputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstLessThanOperatorNodeOutputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_less_than_operator_node_output_right.py
class AstLessThanOperatorNodeOutputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOperatorNodeOutputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstLessThanOperatorNodeOutputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_less_than_or_equals_operator_node_output_left.py
class AstLessThanOrEqualsOperatorNodeOutputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstLessThanOrEqualsOperatorNodeOutputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_less_than_or_equals_operator_node_output_right.py
class AstLessThanOrEqualsOperatorNodeOutputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstLessThanOrEqualsOperatorNodeOutputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstLessThanOrEqualsOperatorNodeOutputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_not_equals_operator_node_output_left.py
class AstNotEqualsOperatorNodeOutputLeft_AndOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_BooleanLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_DynamicVariable(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_EqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_GtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_GteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_Llm(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_LtOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_LteOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_NeqOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_NumberLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputLeft_OrOperator(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstNotEqualsOperatorNodeOutputLeft_StringLiteral(UncheckedBaseModel):
    """
    Left operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# From ast_not_equals_operator_node_output_right.py
class AstNotEqualsOperatorNodeOutputRight_AndOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["and_operator"] = "and_operator"
    children: typing.List["AstAndOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_BooleanLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["boolean_literal"] = "boolean_literal"
    value: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_DynamicVariable(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["dynamic_variable"] = "dynamic_variable"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_EqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["eq_operator"] = "eq_operator"
    left: "AstEqualsOperatorNodeOutputLeft"
    right: "AstEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_GtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gt_operator"] = "gt_operator"
    left: "AstGreaterThanOperatorNodeOutputLeft"
    right: "AstGreaterThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_GteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["gte_operator"] = "gte_operator"
    left: "AstGreaterThanOrEqualsOperatorNodeOutputLeft"
    right: "AstGreaterThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_Llm(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["llm"] = "llm"
    prompt: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_LtOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lt_operator"] = "lt_operator"
    left: "AstLessThanOperatorNodeOutputLeft"
    right: "AstLessThanOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_LteOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["lte_operator"] = "lte_operator"
    left: "AstLessThanOrEqualsOperatorNodeOutputLeft"
    right: "AstLessThanOrEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_NeqOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["neq_operator"] = "neq_operator"
    left: "AstNotEqualsOperatorNodeOutputLeft"
    right: "AstNotEqualsOperatorNodeOutputRight"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_NumberLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["number_literal"] = "number_literal"
    value: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class AstNotEqualsOperatorNodeOutputRight_OrOperator(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["or_operator"] = "or_operator"
    children: typing.List["AstOrOperatorNodeOutputChildrenItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


# Circular import removed: from .ast_and_operator_node_output import AstAndOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_equals_operator_node_output import AstEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_operator_node_output import AstGreaterThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_greater_than_or_equals_operator_node_output import AstGreaterThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_operator_node_output import AstLessThanOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_less_than_or_equals_operator_node_output import AstLessThanOrEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_not_equals_operator_node_output import AstNotEqualsOperatorNodeOutput  # noqa: E402, F401, I001
# Circular import removed: from .ast_or_operator_node_output import AstOrOperatorNodeOutput  # noqa: E402, F401, I001


class AstNotEqualsOperatorNodeOutputRight_StringLiteral(UncheckedBaseModel):
    """
    Right operand of the binary operator.
    """

    type: typing.Literal["string_literal"] = "string_literal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# ============================================================================
# Union type definitions
# ============================================================================

AstAndOperatorNodeOutputChildrenItem = typing_extensions.Annotated[
    typing.Union[
        AstAndOperatorNodeOutputChildrenItem_AndOperator,
        AstAndOperatorNodeOutputChildrenItem_BooleanLiteral,
        AstAndOperatorNodeOutputChildrenItem_DynamicVariable,
        AstAndOperatorNodeOutputChildrenItem_EqOperator,
        AstAndOperatorNodeOutputChildrenItem_GtOperator,
        AstAndOperatorNodeOutputChildrenItem_GteOperator,
        AstAndOperatorNodeOutputChildrenItem_Llm,
        AstAndOperatorNodeOutputChildrenItem_LtOperator,
        AstAndOperatorNodeOutputChildrenItem_LteOperator,
        AstAndOperatorNodeOutputChildrenItem_NeqOperator,
        AstAndOperatorNodeOutputChildrenItem_NumberLiteral,
        AstAndOperatorNodeOutputChildrenItem_OrOperator,
        AstAndOperatorNodeOutputChildrenItem_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstOrOperatorNodeOutputChildrenItem = typing_extensions.Annotated[
    typing.Union[
        AstOrOperatorNodeOutputChildrenItem_AndOperator,
        AstOrOperatorNodeOutputChildrenItem_BooleanLiteral,
        AstOrOperatorNodeOutputChildrenItem_DynamicVariable,
        AstOrOperatorNodeOutputChildrenItem_EqOperator,
        AstOrOperatorNodeOutputChildrenItem_GtOperator,
        AstOrOperatorNodeOutputChildrenItem_GteOperator,
        AstOrOperatorNodeOutputChildrenItem_Llm,
        AstOrOperatorNodeOutputChildrenItem_LtOperator,
        AstOrOperatorNodeOutputChildrenItem_LteOperator,
        AstOrOperatorNodeOutputChildrenItem_NeqOperator,
        AstOrOperatorNodeOutputChildrenItem_NumberLiteral,
        AstOrOperatorNodeOutputChildrenItem_OrOperator,
        AstOrOperatorNodeOutputChildrenItem_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstEqualsOperatorNodeOutputLeft = typing_extensions.Annotated[
    typing.Union[
        AstEqualsOperatorNodeOutputLeft_AndOperator,
        AstEqualsOperatorNodeOutputLeft_BooleanLiteral,
        AstEqualsOperatorNodeOutputLeft_DynamicVariable,
        AstEqualsOperatorNodeOutputLeft_EqOperator,
        AstEqualsOperatorNodeOutputLeft_GtOperator,
        AstEqualsOperatorNodeOutputLeft_GteOperator,
        AstEqualsOperatorNodeOutputLeft_Llm,
        AstEqualsOperatorNodeOutputLeft_LtOperator,
        AstEqualsOperatorNodeOutputLeft_LteOperator,
        AstEqualsOperatorNodeOutputLeft_NeqOperator,
        AstEqualsOperatorNodeOutputLeft_NumberLiteral,
        AstEqualsOperatorNodeOutputLeft_OrOperator,
        AstEqualsOperatorNodeOutputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstEqualsOperatorNodeOutputRight = typing_extensions.Annotated[
    typing.Union[
        AstEqualsOperatorNodeOutputRight_AndOperator,
        AstEqualsOperatorNodeOutputRight_BooleanLiteral,
        AstEqualsOperatorNodeOutputRight_DynamicVariable,
        AstEqualsOperatorNodeOutputRight_EqOperator,
        AstEqualsOperatorNodeOutputRight_GtOperator,
        AstEqualsOperatorNodeOutputRight_GteOperator,
        AstEqualsOperatorNodeOutputRight_Llm,
        AstEqualsOperatorNodeOutputRight_LtOperator,
        AstEqualsOperatorNodeOutputRight_LteOperator,
        AstEqualsOperatorNodeOutputRight_NeqOperator,
        AstEqualsOperatorNodeOutputRight_NumberLiteral,
        AstEqualsOperatorNodeOutputRight_OrOperator,
        AstEqualsOperatorNodeOutputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstGreaterThanOperatorNodeOutputLeft = typing_extensions.Annotated[
    typing.Union[
        AstGreaterThanOperatorNodeOutputLeft_AndOperator,
        AstGreaterThanOperatorNodeOutputLeft_BooleanLiteral,
        AstGreaterThanOperatorNodeOutputLeft_DynamicVariable,
        AstGreaterThanOperatorNodeOutputLeft_EqOperator,
        AstGreaterThanOperatorNodeOutputLeft_GtOperator,
        AstGreaterThanOperatorNodeOutputLeft_GteOperator,
        AstGreaterThanOperatorNodeOutputLeft_Llm,
        AstGreaterThanOperatorNodeOutputLeft_LtOperator,
        AstGreaterThanOperatorNodeOutputLeft_LteOperator,
        AstGreaterThanOperatorNodeOutputLeft_NeqOperator,
        AstGreaterThanOperatorNodeOutputLeft_NumberLiteral,
        AstGreaterThanOperatorNodeOutputLeft_OrOperator,
        AstGreaterThanOperatorNodeOutputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstGreaterThanOperatorNodeOutputRight = typing_extensions.Annotated[
    typing.Union[
        AstGreaterThanOperatorNodeOutputRight_AndOperator,
        AstGreaterThanOperatorNodeOutputRight_BooleanLiteral,
        AstGreaterThanOperatorNodeOutputRight_DynamicVariable,
        AstGreaterThanOperatorNodeOutputRight_EqOperator,
        AstGreaterThanOperatorNodeOutputRight_GtOperator,
        AstGreaterThanOperatorNodeOutputRight_GteOperator,
        AstGreaterThanOperatorNodeOutputRight_Llm,
        AstGreaterThanOperatorNodeOutputRight_LtOperator,
        AstGreaterThanOperatorNodeOutputRight_LteOperator,
        AstGreaterThanOperatorNodeOutputRight_NeqOperator,
        AstGreaterThanOperatorNodeOutputRight_NumberLiteral,
        AstGreaterThanOperatorNodeOutputRight_OrOperator,
        AstGreaterThanOperatorNodeOutputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstGreaterThanOrEqualsOperatorNodeOutputLeft = typing_extensions.Annotated[
    typing.Union[
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_AndOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_BooleanLiteral,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_DynamicVariable,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_EqOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_GtOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_GteOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_Llm,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_LtOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_LteOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_NeqOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_NumberLiteral,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_OrOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstGreaterThanOrEqualsOperatorNodeOutputRight = typing_extensions.Annotated[
    typing.Union[
        AstGreaterThanOrEqualsOperatorNodeOutputRight_AndOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_BooleanLiteral,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_DynamicVariable,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_EqOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_GtOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_GteOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_Llm,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_LtOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_LteOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_NeqOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_NumberLiteral,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_OrOperator,
        AstGreaterThanOrEqualsOperatorNodeOutputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstLessThanOperatorNodeOutputLeft = typing_extensions.Annotated[
    typing.Union[
        AstLessThanOperatorNodeOutputLeft_AndOperator,
        AstLessThanOperatorNodeOutputLeft_BooleanLiteral,
        AstLessThanOperatorNodeOutputLeft_DynamicVariable,
        AstLessThanOperatorNodeOutputLeft_EqOperator,
        AstLessThanOperatorNodeOutputLeft_GtOperator,
        AstLessThanOperatorNodeOutputLeft_GteOperator,
        AstLessThanOperatorNodeOutputLeft_Llm,
        AstLessThanOperatorNodeOutputLeft_LtOperator,
        AstLessThanOperatorNodeOutputLeft_LteOperator,
        AstLessThanOperatorNodeOutputLeft_NeqOperator,
        AstLessThanOperatorNodeOutputLeft_NumberLiteral,
        AstLessThanOperatorNodeOutputLeft_OrOperator,
        AstLessThanOperatorNodeOutputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstLessThanOperatorNodeOutputRight = typing_extensions.Annotated[
    typing.Union[
        AstLessThanOperatorNodeOutputRight_AndOperator,
        AstLessThanOperatorNodeOutputRight_BooleanLiteral,
        AstLessThanOperatorNodeOutputRight_DynamicVariable,
        AstLessThanOperatorNodeOutputRight_EqOperator,
        AstLessThanOperatorNodeOutputRight_GtOperator,
        AstLessThanOperatorNodeOutputRight_GteOperator,
        AstLessThanOperatorNodeOutputRight_Llm,
        AstLessThanOperatorNodeOutputRight_LtOperator,
        AstLessThanOperatorNodeOutputRight_LteOperator,
        AstLessThanOperatorNodeOutputRight_NeqOperator,
        AstLessThanOperatorNodeOutputRight_NumberLiteral,
        AstLessThanOperatorNodeOutputRight_OrOperator,
        AstLessThanOperatorNodeOutputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstLessThanOrEqualsOperatorNodeOutputLeft = typing_extensions.Annotated[
    typing.Union[
        AstLessThanOrEqualsOperatorNodeOutputLeft_AndOperator,
        AstLessThanOrEqualsOperatorNodeOutputLeft_BooleanLiteral,
        AstLessThanOrEqualsOperatorNodeOutputLeft_DynamicVariable,
        AstLessThanOrEqualsOperatorNodeOutputLeft_EqOperator,
        AstLessThanOrEqualsOperatorNodeOutputLeft_GtOperator,
        AstLessThanOrEqualsOperatorNodeOutputLeft_GteOperator,
        AstLessThanOrEqualsOperatorNodeOutputLeft_Llm,
        AstLessThanOrEqualsOperatorNodeOutputLeft_LtOperator,
        AstLessThanOrEqualsOperatorNodeOutputLeft_LteOperator,
        AstLessThanOrEqualsOperatorNodeOutputLeft_NeqOperator,
        AstLessThanOrEqualsOperatorNodeOutputLeft_NumberLiteral,
        AstLessThanOrEqualsOperatorNodeOutputLeft_OrOperator,
        AstLessThanOrEqualsOperatorNodeOutputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstLessThanOrEqualsOperatorNodeOutputRight = typing_extensions.Annotated[
    typing.Union[
        AstLessThanOrEqualsOperatorNodeOutputRight_AndOperator,
        AstLessThanOrEqualsOperatorNodeOutputRight_BooleanLiteral,
        AstLessThanOrEqualsOperatorNodeOutputRight_DynamicVariable,
        AstLessThanOrEqualsOperatorNodeOutputRight_EqOperator,
        AstLessThanOrEqualsOperatorNodeOutputRight_GtOperator,
        AstLessThanOrEqualsOperatorNodeOutputRight_GteOperator,
        AstLessThanOrEqualsOperatorNodeOutputRight_Llm,
        AstLessThanOrEqualsOperatorNodeOutputRight_LtOperator,
        AstLessThanOrEqualsOperatorNodeOutputRight_LteOperator,
        AstLessThanOrEqualsOperatorNodeOutputRight_NeqOperator,
        AstLessThanOrEqualsOperatorNodeOutputRight_NumberLiteral,
        AstLessThanOrEqualsOperatorNodeOutputRight_OrOperator,
        AstLessThanOrEqualsOperatorNodeOutputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstNotEqualsOperatorNodeOutputLeft = typing_extensions.Annotated[
    typing.Union[
        AstNotEqualsOperatorNodeOutputLeft_AndOperator,
        AstNotEqualsOperatorNodeOutputLeft_BooleanLiteral,
        AstNotEqualsOperatorNodeOutputLeft_DynamicVariable,
        AstNotEqualsOperatorNodeOutputLeft_EqOperator,
        AstNotEqualsOperatorNodeOutputLeft_GtOperator,
        AstNotEqualsOperatorNodeOutputLeft_GteOperator,
        AstNotEqualsOperatorNodeOutputLeft_Llm,
        AstNotEqualsOperatorNodeOutputLeft_LtOperator,
        AstNotEqualsOperatorNodeOutputLeft_LteOperator,
        AstNotEqualsOperatorNodeOutputLeft_NeqOperator,
        AstNotEqualsOperatorNodeOutputLeft_NumberLiteral,
        AstNotEqualsOperatorNodeOutputLeft_OrOperator,
        AstNotEqualsOperatorNodeOutputLeft_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

AstNotEqualsOperatorNodeOutputRight = typing_extensions.Annotated[
    typing.Union[
        AstNotEqualsOperatorNodeOutputRight_AndOperator,
        AstNotEqualsOperatorNodeOutputRight_BooleanLiteral,
        AstNotEqualsOperatorNodeOutputRight_DynamicVariable,
        AstNotEqualsOperatorNodeOutputRight_EqOperator,
        AstNotEqualsOperatorNodeOutputRight_GtOperator,
        AstNotEqualsOperatorNodeOutputRight_GteOperator,
        AstNotEqualsOperatorNodeOutputRight_Llm,
        AstNotEqualsOperatorNodeOutputRight_LtOperator,
        AstNotEqualsOperatorNodeOutputRight_LteOperator,
        AstNotEqualsOperatorNodeOutputRight_NeqOperator,
        AstNotEqualsOperatorNodeOutputRight_NumberLiteral,
        AstNotEqualsOperatorNodeOutputRight_OrOperator,
        AstNotEqualsOperatorNodeOutputRight_StringLiteral,
    ],
    UnionMetadata(discriminant="type"),
]

# ============================================================================
# Update forward references - all types are now defined!
# ============================================================================

# update_forward_refs(AstAndOperatorNodeOutputChildrenItem_AndOperator)
# update_forward_refs(AstAndOperatorNodeOutputChildrenItem_EqOperator)
# update_forward_refs(AstAndOperatorNodeOutputChildrenItem_GtOperator)
# update_forward_refs(AstAndOperatorNodeOutputChildrenItem_GteOperator)
# update_forward_refs(AstAndOperatorNodeOutputChildrenItem_LtOperator)
# update_forward_refs(AstAndOperatorNodeOutputChildrenItem_LteOperator)
# update_forward_refs(AstAndOperatorNodeOutputChildrenItem_NeqOperator)
# update_forward_refs(AstAndOperatorNodeOutputChildrenItem_OrOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputLeft_AndOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputLeft_EqOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputLeft_GtOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputLeft_GteOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputLeft_LtOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputLeft_LteOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputLeft_NeqOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputLeft_OrOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputRight_AndOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputRight_EqOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputRight_GtOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputRight_GteOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputRight_LtOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputRight_LteOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputRight_NeqOperator)
# update_forward_refs(AstEqualsOperatorNodeOutputRight_OrOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputLeft_AndOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputLeft_EqOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputLeft_GtOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputLeft_GteOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputLeft_LtOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputLeft_LteOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputLeft_NeqOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputLeft_OrOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputRight_AndOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputRight_EqOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputRight_GtOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputRight_GteOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputRight_LtOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputRight_LteOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputRight_NeqOperator)
# update_forward_refs(AstGreaterThanOperatorNodeOutputRight_OrOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputLeft_AndOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputLeft_EqOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputLeft_GtOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputLeft_GteOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputLeft_LtOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputLeft_LteOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputLeft_NeqOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputLeft_OrOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputRight_AndOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputRight_EqOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputRight_GtOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputRight_GteOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputRight_LtOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputRight_LteOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputRight_NeqOperator)
# update_forward_refs(AstGreaterThanOrEqualsOperatorNodeOutputRight_OrOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputLeft_AndOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputLeft_EqOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputLeft_GtOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputLeft_GteOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputLeft_LtOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputLeft_LteOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputLeft_NeqOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputLeft_OrOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputRight_AndOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputRight_EqOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputRight_GtOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputRight_GteOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputRight_LtOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputRight_LteOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputRight_NeqOperator)
# update_forward_refs(AstLessThanOperatorNodeOutputRight_OrOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputLeft_AndOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputLeft_EqOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputLeft_GtOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputLeft_GteOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputLeft_LtOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputLeft_LteOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputLeft_NeqOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputLeft_OrOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputRight_AndOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputRight_EqOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputRight_GtOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputRight_GteOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputRight_LtOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputRight_LteOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputRight_NeqOperator)
# update_forward_refs(AstLessThanOrEqualsOperatorNodeOutputRight_OrOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputLeft_AndOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputLeft_EqOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputLeft_GtOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputLeft_GteOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputLeft_LtOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputLeft_LteOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputLeft_NeqOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputLeft_OrOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputRight_AndOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputRight_EqOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputRight_GtOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputRight_GteOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputRight_LtOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputRight_LteOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputRight_NeqOperator)
# update_forward_refs(AstNotEqualsOperatorNodeOutputRight_OrOperator)
# update_forward_refs(AstOrOperatorNodeOutputChildrenItem_AndOperator)
# update_forward_refs(AstOrOperatorNodeOutputChildrenItem_EqOperator)
# update_forward_refs(AstOrOperatorNodeOutputChildrenItem_GtOperator)
# update_forward_refs(AstOrOperatorNodeOutputChildrenItem_GteOperator)
# update_forward_refs(AstOrOperatorNodeOutputChildrenItem_LtOperator)
# update_forward_refs(AstOrOperatorNodeOutputChildrenItem_LteOperator)
# update_forward_refs(AstOrOperatorNodeOutputChildrenItem_NeqOperator)
# update_forward_refs(AstOrOperatorNodeOutputChildrenItem_OrOperator)
