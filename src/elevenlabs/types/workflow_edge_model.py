# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .workflow_edge_model_backward_condition import WorkflowEdgeModelBackwardCondition
from .workflow_edge_model_forward_condition import WorkflowEdgeModelForwardCondition


class WorkflowEdgeModel(UncheckedBaseModel):
    source: str
    target: str
    forward_condition: typing.Optional[WorkflowEdgeModelForwardCondition] = pydantic.Field(default=None)
    """
    Condition that must be met for the edge to be traversed in the forward direction.
    """

    backward_condition: typing.Optional[WorkflowEdgeModelBackwardCondition] = pydantic.Field(default=None)
    """
    Condition that must be met for the edge to be traversed in the backward direction.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
